// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/lottery/lottery.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lottery struct {
	Index     string     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	StartAt   int64      `protobuf:"varint,2,opt,name=startAt,proto3" json:"startAt,omitempty"`
	EndAt     int64      `protobuf:"varint,3,opt,name=endAt,proto3" json:"endAt,omitempty"`
	Fee       types.Coin `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee"`
	MinBet    types.Coin `protobuf:"bytes,5,opt,name=minBet,proto3" json:"minBet"`
	MaxBet    types.Coin `protobuf:"bytes,6,opt,name=maxBet,proto3" json:"maxBet"`
	BetCount  int64      `protobuf:"varint,7,opt,name=betCount,proto3" json:"betCount,omitempty"`
	BetMax    types.Coin `protobuf:"bytes,8,opt,name=betMax,proto3" json:"betMax"`
	BetMin    types.Coin `protobuf:"bytes,9,opt,name=betMin,proto3" json:"betMin"`
	Bets      []*Bet     `protobuf:"bytes,10,rep,name=bets,proto3" json:"bets,omitempty"`
	WinnerIdx int64      `protobuf:"varint,11,opt,name=winnerIdx,proto3" json:"winnerIdx,omitempty"`
	Reward    types.Coin `protobuf:"bytes,12,opt,name=reward,proto3" json:"reward"`
}

func (m *Lottery) Reset()         { *m = Lottery{} }
func (m *Lottery) String() string { return proto.CompactTextString(m) }
func (*Lottery) ProtoMessage()    {}
func (*Lottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afbd19f2e624dbf, []int{0}
}
func (m *Lottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lottery.Merge(m, src)
}
func (m *Lottery) XXX_Size() int {
	return m.Size()
}
func (m *Lottery) XXX_DiscardUnknown() {
	xxx_messageInfo_Lottery.DiscardUnknown(m)
}

var xxx_messageInfo_Lottery proto.InternalMessageInfo

func (m *Lottery) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Lottery) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *Lottery) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *Lottery) GetFee() types.Coin {
	if m != nil {
		return m.Fee
	}
	return types.Coin{}
}

func (m *Lottery) GetMinBet() types.Coin {
	if m != nil {
		return m.MinBet
	}
	return types.Coin{}
}

func (m *Lottery) GetMaxBet() types.Coin {
	if m != nil {
		return m.MaxBet
	}
	return types.Coin{}
}

func (m *Lottery) GetBetCount() int64 {
	if m != nil {
		return m.BetCount
	}
	return 0
}

func (m *Lottery) GetBetMax() types.Coin {
	if m != nil {
		return m.BetMax
	}
	return types.Coin{}
}

func (m *Lottery) GetBetMin() types.Coin {
	if m != nil {
		return m.BetMin
	}
	return types.Coin{}
}

func (m *Lottery) GetBets() []*Bet {
	if m != nil {
		return m.Bets
	}
	return nil
}

func (m *Lottery) GetWinnerIdx() int64 {
	if m != nil {
		return m.WinnerIdx
	}
	return 0
}

func (m *Lottery) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Lottery)(nil), "lottery.lottery.Lottery")
}

func init() { proto.RegisterFile("lottery/lottery/lottery.proto", fileDescriptor_2afbd19f2e624dbf) }

var fileDescriptor_2afbd19f2e624dbf = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x6b, 0xe3, 0x40,
	0x10, 0xc5, 0xa5, 0x93, 0xfc, 0x6f, 0x7d, 0x70, 0xb0, 0x18, 0x6e, 0x6d, 0xee, 0x14, 0x91, 0x4a,
	0x95, 0x84, 0x9c, 0x22, 0xb5, 0xe5, 0x2a, 0x90, 0x34, 0x2a, 0xd3, 0x04, 0xc9, 0x9a, 0x18, 0x41,
	0xbc, 0x6b, 0xa4, 0x49, 0x2c, 0xd7, 0xf9, 0x02, 0xf9, 0x58, 0x2e, 0x5d, 0xa6, 0x0a, 0xc1, 0xfe,
	0x22, 0x61, 0x77, 0x25, 0x07, 0x5c, 0x29, 0xd5, 0xee, 0x9b, 0x79, 0x6f, 0xf8, 0x15, 0x8f, 0xfc,
	0x7f, 0x12, 0x88, 0x50, 0x6c, 0x83, 0xb3, 0xd7, 0x5f, 0x17, 0x02, 0x05, 0xfd, 0xd3, 0xc8, 0xfa,
	0x9d, 0x8c, 0x96, 0x62, 0x29, 0xd4, 0x2e, 0x90, 0x3f, 0x6d, 0x9b, 0x8c, 0x17, 0xa2, 0x5c, 0x89,
	0xf2, 0x41, 0x2f, 0xb4, 0xa8, 0x57, 0x8e, 0x56, 0x41, 0x9a, 0x94, 0x10, 0xbc, 0x84, 0x29, 0x60,
	0x12, 0x06, 0x0b, 0x91, 0xf3, 0x26, 0x7a, 0x0e, 0x90, 0x02, 0xea, 0xd5, 0xe5, 0xab, 0x4d, 0x7a,
	0xb7, 0x7a, 0x4a, 0x47, 0xa4, 0x93, 0xf3, 0x0c, 0x2a, 0x66, 0xba, 0xa6, 0x37, 0x88, 0xb5, 0xa0,
	0x8c, 0xf4, 0x4a, 0x4c, 0x0a, 0x9c, 0x21, 0xfb, 0xe5, 0x9a, 0x9e, 0x15, 0x37, 0x52, 0xfa, 0x81,
	0x67, 0x33, 0x64, 0x96, 0x9a, 0x6b, 0x41, 0x43, 0x62, 0x3d, 0x02, 0x30, 0xdb, 0x35, 0xbd, 0xe1,
	0x74, 0xec, 0xd7, 0xa0, 0x12, 0xcd, 0xaf, 0xd1, 0xfc, 0xb9, 0xc8, 0x79, 0x64, 0xef, 0x3e, 0x2e,
	0x8c, 0x58, 0x7a, 0xe9, 0x35, 0xe9, 0xae, 0x72, 0x1e, 0x01, 0xb2, 0x4e, 0xbb, 0x54, 0x6d, 0x57,
	0xc1, 0xa4, 0x92, 0xc1, 0x6e, 0xdb, 0xa0, 0xb2, 0xd3, 0x09, 0xe9, 0xa7, 0x80, 0x73, 0xf1, 0xcc,
	0x91, 0xf5, 0x14, 0xfd, 0x49, 0xcb, 0xa3, 0x29, 0xe0, 0x5d, 0x52, 0xb1, 0x7e, 0xcb, 0xa3, 0xda,
	0xde, 0x04, 0x73, 0xce, 0x06, 0x3f, 0x08, 0xe6, 0x9c, 0x7a, 0xc4, 0x4e, 0x01, 0x4b, 0x46, 0x5c,
	0xcb, 0x1b, 0x4e, 0x47, 0xfe, 0x59, 0x21, 0xfc, 0x08, 0x30, 0x56, 0x0e, 0xfa, 0x8f, 0x0c, 0x36,
	0x39, 0xe7, 0x50, 0xdc, 0x64, 0x15, 0x1b, 0x2a, 0xf0, 0xef, 0x81, 0x04, 0x28, 0x60, 0x93, 0x14,
	0x19, 0xfb, 0xdd, 0x12, 0x40, 0xdb, 0xa3, 0x70, 0x77, 0x70, 0xcc, 0xfd, 0xc1, 0x31, 0x3f, 0x0f,
	0x8e, 0xf9, 0x76, 0x74, 0x8c, 0xfd, 0xd1, 0x31, 0xde, 0x8f, 0x8e, 0x71, 0xff, 0xb7, 0xa9, 0x4c,
	0x75, 0x2a, 0x0f, 0x6e, 0xd7, 0x50, 0xa6, 0x5d, 0xd5, 0x9f, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8c, 0xe8, 0x1f, 0x78, 0xdd, 0x02, 0x00, 0x00,
}

func (m *Lottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLottery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.WinnerIdx != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.WinnerIdx))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Bets) > 0 {
		for iNdEx := len(m.Bets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLottery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.BetMin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLottery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.BetMax.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLottery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.BetCount != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.BetCount))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.MaxBet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLottery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.MinBet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLottery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLottery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EndAt != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x18
	}
	if m.StartAt != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLottery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLottery(dAtA []byte, offset int, v uint64) int {
	offset -= sovLottery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLottery(uint64(l))
	}
	if m.StartAt != 0 {
		n += 1 + sovLottery(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovLottery(uint64(m.EndAt))
	}
	l = m.Fee.Size()
	n += 1 + l + sovLottery(uint64(l))
	l = m.MinBet.Size()
	n += 1 + l + sovLottery(uint64(l))
	l = m.MaxBet.Size()
	n += 1 + l + sovLottery(uint64(l))
	if m.BetCount != 0 {
		n += 1 + sovLottery(uint64(m.BetCount))
	}
	l = m.BetMax.Size()
	n += 1 + l + sovLottery(uint64(l))
	l = m.BetMin.Size()
	n += 1 + l + sovLottery(uint64(l))
	if len(m.Bets) > 0 {
		for _, e := range m.Bets {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	if m.WinnerIdx != 0 {
		n += 1 + sovLottery(uint64(m.WinnerIdx))
	}
	l = m.Reward.Size()
	n += 1 + l + sovLottery(uint64(l))
	return n
}

func sovLottery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLottery(x uint64) (n int) {
	return sovLottery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetCount", wireType)
			}
			m.BetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BetCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetMin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bets = append(m.Bets, &Bet{})
			if err := m.Bets[len(m.Bets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerIdx", wireType)
			}
			m.WinnerIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinnerIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLottery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLottery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLottery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLottery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLottery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLottery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLottery = fmt.Errorf("proto: unexpected end of group")
)
